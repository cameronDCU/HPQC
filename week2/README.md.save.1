
# Week 2
## Comparing C and Python

### Running the Code
In order to test the writing speeds in both Python and C, two programs were created: `time_print_writing.py` and `time_print_writing.c`. Both programs can be called from the command line with the number of integers you want to write to a file. 

The speed of writing is output to the console whenever the program is executed. These programs can handle varying input sizes to measure how runtime scales with the size of the input.

There are 2 programs for reading the input file as well: `read_file_time.py` and `read_file_time.c`. These programs read the data generated by the writing programs and measure the time it takes to load the contents of the file into memory. The runtime for reading is displayed in the terminal for both languages.

### Results Table

| **Operation**       | **Language** | **Input Size** | **Runtime (seconds)** |
|----------------------|--------------|----------------|------------------------|
| Writing to file      | C            | 100            | 0.056                 |
| Writing to file      | Python       | 100            | 0.00005                 |
| Writing to file      | C            | 1,000          | 0.06                 |
| Writing to file      | Python       | 1,000          | 0.001                 |
| Writing to file      | C            | 100,000        | 0.01                 |
| Writing to file      | Python       | 100,000        | 0.07                 |
| Reading from file    | C            | 100            | 0.00008                 |
| Reading from file    | Python       | 100            | 0.0034                 |
| Reading from file    | C            | 1,000          | 0.0001                 |
| Reading from file    | Python       | 1,000          | 0.0118                 |
| Reading from file    | C            | 100,000        | 0.0002                 |
| Reading from file    | Python       | 100,000        | 0.0684                 |
 



   The experiments showed that C consistently outperformed Python in terms of runtime for both writing to and reading from a file, particularly for larger input sizes. When writing to a file, C demonstrated significantly faster performance. Python, on the other hand, was noticeably slower. However, Python's syntax was much simpler, allowing for faster implementation despite the performance trade-offs.
   For reading operations, C again displayed superior efficiency, handling larger file sizes with minimal impact on runtime. Python's reading operations, while slower, were easier to implement and required fewer lines of code. The variability in Pythonâ€™s runtime became more evident as input sizes increased, but for smaller files, the difference between the two languages was less pronounced. In summary, C is the better choice for performance-critical applications where runtime efficiency is a priority. 

### How to Run the Code
1. **C**:
   ```bash
   gcc -o time_print_writing time_print_writing.c
   ./time_print_writing 100

2. **Python**:
   ```bash
   python3 time_print_writing.py 100
